PART->1(setup git and  configure for creating global repos)

check git version
// git --version
to see git configure list
// git config --list

To get the value of a specific configuration setting:
git config --global user.name "Your Name"

To set a configuration value globally (for all repositories):
git config --global user.email "your.email@example.com"

To delete a configuration setting:
git config --unset user.name

create local repository(it will create master branch)
// git init

create local repository(it will create main branch)
// git init -b main

command to remove git directory
// Remove-Item -Recurse -Force .git

check git status inside working repositories
// git status

by default, whe one create a file in working directory that will be a part of working directory and git should know that this should be a part of git, and should be in staging area

when we create  git branch it create as a master branch


PART->2(add_commit)
add any file to git staging area
// git add <filename>
Unstage it
// git rm --cached <file>...

do commits
// git commit -m "logical message"

to know all the commits
// git log

***
when you do any chages in your file and you want save commit it, at first you have add the file again
to the staging area by using
// git add <filename>
once this file going into a staging area ,then we can commit 
by using
// git commit -m "logical message"
***


part 3-(commit without add)
***if we want to directly commit any changes without add it to the staging area->
// git commit -a -m "logical message"  
this is how we use "-a" for changing from working directory to commit in git.
 ***
 part 4-(diff command)
 this is the option to find the difference what you have worked and
 what's already in the commit

 // git diff(if your file is in the working directory)
 /// git diff --stagged (when your file is in the staging area)

part 5(git removed file)->
now I have created Readme.md and creds.txt, and i want to take both
to the staging area at once
// git add.(after this all files will be marked by A automatically)

after this you can again commit using 
// git commit -m " logical message"


in the creds.txt file i have wrote down my user credentials,
and I don't want that to commit in my Github repository
now I cacn do two this
1. Manually delete it.
But here is a problem if we run the command // git status
there we can see that it is deleted from your working directory but not
from the git stagibng area.

2.We can use command 
// git rm --cached creds.txt



